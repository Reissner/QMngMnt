<?xml version="1.0"?>

<ruleset name="myruleset"
	 xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
  This file is part of the quality assurance mechanism. 

  This ruleset file is for pmd 5.6.1 and shall be updated 
  whenever the version of pmd changes. 

  Note that each ruleset provided by the current pmd version 
  must be mentioned: 
  - either a ruleset is activated as a whole 
  - or it activated as a whole with exclusions 
  - or it is commented out as a whole indicating that it is explicitly excluded 
  - or it is commented out as a whole but selected rules in the ruleset 
    are applied. 
  In the latter case each rule in the ruleset must be mentioned: 
  it is either activated or commented out. 
  By need it is parametrized. 
  </description>

  <!-- marked with D are on by default -->
  <!-- marked with C shall be checked whether useful -->
  
  <!-- bestpractices -->
  <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod" />
  <!--rule ref="category/java/bestpractices.xml/AccessorClassGeneration" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/AccessorMethodGeneration" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/AvoidReassigningParameters" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/AvoidStringBufferField" /--><!--C -->
  <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP" /><!--D-->
  <rule ref="category/java/bestpractices.xml/CheckResultSet" /><!--D-->
  <rule ref="category/java/bestpractices.xml/ConstantsInInterface" />
  <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt" />
  <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach" />
  <!--rule ref="category/java/bestpractices.xml/ForLoopVariableCount" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/GuardLogStatement" /--><!--C -->
  <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation" />
  <!--rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation" /-->
  <!--rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation" /-->
  <!--rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation" /-->
  <!--rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert" /--><!--C -->
  <rule ref="category/java/bestpractices.xml/JUnitUseExpected" />
  <rule ref="category/java/bestpractices.xml/LooseCoupling" />
  <!--rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/MissingOverride" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/OneDeclarationPerLine" /--><!--C -->
 <!--rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInCaseInsensitiveComparisons" /-->
  <!--rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInComparisons" /-->
  <rule ref="category/java/bestpractices.xml/PreserveStackTrace" />
  <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator" />
  <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap" />
  <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList" />
  <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault" />
  <!--rule ref="category/java/bestpractices.xml/SystemPrintln" /--><!--C -->

  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter" /><!--D-->
  <rule ref="category/java/bestpractices.xml/UnusedImports" /><!--D-->
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" /><!--D-->
  <rule ref="category/java/bestpractices.xml/UnusedPrivateField" /><!--D-->
  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod" /><!--D-->
  <!--rule ref="category/java/bestpractices.xml/UseAssertEqualsInsteadOfAssertTrue" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/UseAssertNullInsteadOfAssertTrue" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/UseAssertSameInsteadOfAssertTrue" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/UseAssertTrueInsteadOfAssertEquals" /--><!--C -->
  <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty" />
  <!--rule ref="category/java/bestpractices.xml/UseTryWithResources" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/UseVarargs" /--><!--C -->
  <!--rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean" /--><!--C -->




  

  <!--rule ref="category/java/codestyle.xml/ForLoopsMustUseBraces" />
  <rule ref="category/java/codestyle.xml/IfElseStmtsMustUseBraces" />
  <rule ref="category/java/codestyle.xml/IfStmtsMustUseBraces" />
  <rule ref="category/java/codestyle.xml/WhileLoopsMustUseBraces" /-->

  <!--rule ref="category/java/codestyle.xml/AtLeastOneConstructor" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/AvoidDollarSigns" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/AvoidFinalLocalVariable" /-->
  <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />
  <!--rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/AvoidUsingNativeCode" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/BooleanGetMethodName" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/CallSuperInConstructor" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/ClassNamingConventions" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier" /--><!--C -->
  <rule ref="category/java/codestyle.xml/ConfusingTernary" />
  <!--rule ref="category/java/codestyle.xml/ControlStatementBraces" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/DefaultPackage" /--><!--C -->
  <rule ref="category/java/codestyle.xml/DontImportJavaLang" /><!--D-->
  <rule ref="category/java/codestyle.xml/DuplicateImports" /><!--D-->
  <!--rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract" /--><!--C -->
  <rule ref="category/java/codestyle.xml/ExtendsObject" /><!--D-->
  <!--rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/FieldNamingConventions" /--><!--C -->
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" /><!--D-->
  <!--rule ref="category/java/codestyle.xml/FormalParameterNamingConventions" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/GenericsNaming" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/IdenticalCatchBranches" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/LinguisticNaming" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/LocalHomeNamingConvention" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/LocalVariableNamingConventions" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/LongVariable" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/MethodNamingConventions" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/NoPackage" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/OnlyOneReturn" /--><!--no -->
  <!--rule ref="category/java/codestyle.xml/PackageCase" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/PrematureDeclaration" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/ShortClassName" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/ShortMethodName" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/ShortVariable" /--><!--C -->
  <rule ref="category/java/codestyle.xml/TooManyStaticImports"><!--D-->
    <properties>
      <property name="maximumStaticImports"    value="6"/>
    </properties>
  </rule>
  <!--rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement" /--><!--C -->
  <!--rule ref="category/java/codestyle.xml/UnnecessaryConstructor" /--><!--C -->
  <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/><!--D-->
  <!-- buggy -->
  <!--rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn" /-->
  <rule ref="category/java/codestyle.xml/UnnecessaryModifier" /><!--D-->
  <rule ref="category/java/codestyle.xml/UnnecessaryReturn" /><!--D-->
  <!--rule ref="category/java/codestyle.xml/UseDiamondOperator" /-->
  <!--rule ref="category/java/codestyle.xml/UselessParentheses" /--><!--D-->
  <rule ref="category/java/codestyle.xml/UselessQualifiedThis" /><!--D-->
  <!--rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals" /-->



  
  <!--rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel" /-->
  <!--rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod" /-->
  <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" />
  <rule ref="category/java/design.xml/AvoidCatchingGenericException" />
  <!--rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts" /--><!--C-->
  <rule ref="category/java/design.xml/AvoidRethrowingException" />
  <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />
  <rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />
  <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes" />
  <!--rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures" /--><!--C-->
  <!--rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" /--><!--C-->
  <rule ref="category/java/design.xml/CollapsibleIfStatements" /><!--D-->
  <!--rule ref="category/java/design.xml/CouplingBetweenObjects" /--><!--C-->
  <!--rule ref="category/java/design.xml/CyclomaticComplexity" /--><!--C-->
  <!--rule ref="category/java/design.xml/DataClass" /--><!--C-->
  <rule ref="category/java/design.xml/DoNotExtendJavaLangError" />
  <rule ref="category/java/design.xml/ExceptionAsFlowControl" />
  <!-- excluded for (X)FPNumber, for (X)MNumber and others -->
  <rule ref="category/java/design.xml/ExcessiveClassLength" >
    <properties>
      <property name="minimum"    value="2200"/><!-- default 1000 -->
    </properties>
  </rule>
   <!--rule ref="category/java/design.xml/ExcessiveImports" /--><!--C-->

  <rule ref="category/java/design.xml/ExcessiveMethodLength">
    <properties>
      <property name="minimum"    value="200"/><!--  -->
    </properties>
  </rule>
  <rule ref="category/java/design.xml/ExcessiveParameterList" />

 <rule ref="category/java/design.xml/ExcessivePublicCount" >
   <properties>
     <property name="minimum"    value="650"/><!--XFPNumber pmd bug? -->
   </properties>
  </rule>
  <rule ref="category/java/design.xml/FinalFieldCouldBeStatic" />
  <!--rule ref="category/java/design.xml/GodClass" /--><!--C-->

  
  <rule ref="category/java/design.xml/ImmutableField" />
  <!--rule ref="category/java/design.xml/LawOfDemeter" /--><!--C-->
  <rule ref="category/java/design.xml/LogicInversion" />
  <!--rule ref="category/java/design.xml/LoosePackageCoupling" /--><!--C-->
  <!--rule ref="category/java/design.xml/NcssCount" /--><!--C-->
  <rule ref="category/java/design.xml/NPathComplexity" />
  <rule ref="category/java/design.xml/SignatureDeclareThrowsException" />
  <rule ref="category/java/design.xml/SimplifiedTernary" /><!--D-->
  <!--rule ref="category/java/design.xml/SimplifyBooleanAssertion" /--><!--C-->
  <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
  <rule ref="category/java/design.xml/SimplifyBooleanReturns" />
  <rule ref="category/java/design.xml/SimplifyConditional" />
  <!--rule ref="category/java/design.xml/SingularField" /--><!--C-->
  <rule ref="category/java/design.xml/SwitchDensity" />
  <rule ref="category/java/design.xml/TooManyFields" >
   <properties>
     <property name="maxfields"    value="25"/>
   </properties>
  </rule>
  <!--rule ref="category/java/design.xml/TooManyMethods" /--><!--C-->


  <!--rule ref="category/java/design.xml/UselessOverridingMethod" /--><!--D-->
  

  <rule ref="category/java/design.xml/UseObjectForClearerAPI" />
  <rule ref="category/java/design.xml/UseUtilityClass" />


  
  <rule ref="category/java/documentation.xml/CommentContent" />
  <!--rule ref="category/java/documentation.xml/CommentRequired" /--><!--C-->
  <!--rule ref="category/java/documentation.xml/CommentSize" /--><!--C-->
  <!--rule ref="category/java/documentation.xml/UncommentedEmptyConstructor" /--><!--C-->
  <!--rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" /--><!--C-->


  <rule ref="category/java/errorprone.xml/AssignmentInOperand">
    <properties>
      <property name='allowIncrementDecrement' value='true'/>
    </properties>
  </rule><!--C-->
  <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic" />
  <!-- ! -->
  <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration" />
  <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier" />
  <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" /><!--D-->
  <rule ref="category/java/errorprone.xml/AvoidCallingFinalize" />
  <rule ref="category/java/errorprone.xml/AvoidCatchingNPE" />
  <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable" />
  <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor" /><!--D-->
  <!--rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals" /--><!--C-->
  <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier" />
  <!--rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName:" /--><!--C-->
  <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName" /><!--C-->
  <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause" />
  <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
    <properties>
      <property name="ignoreMagicNumbers"    value="-1,-1L,0,0L,1,1L,2,2L,0.0"/>
    </properties>
  </rule>
  <!-- Bug already reported: shall allow blanks 
	if (num == 0.0) {
	return MathExtItg.sgn0raw(num) == 1 
		? IEEEclass.PositiveZero      : IEEEclass.NegativeZero;
	}
  -->
  <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation" />
  <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators" /><!--D-->
  <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues" /><!--D-->
  <rule ref="category/java/errorprone.xml/BadComparison" />
  <!--rule ref="category/java/errorprone.xml/BeanMembersShouldSerialize" /--><!--C-->
  <rule ref="category/java/errorprone.xml/BrokenNullCheck" /><!--D-->

  <!--rule ref="category/java/errorprone.xml/CallSuperFirst" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/CallSuperLast" /--><!--C-->
  <rule ref="category/java/errorprone.xml/CheckSkipResult" /><!--D-->
  <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" /><!--D-->
  <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic" />
  <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />
  <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName" />
  <rule ref="category/java/errorprone.xml/CloneThrowsCloneNotSupportedException" />
  <rule ref="category/java/errorprone.xml/CloseResource" />
  <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals" />

  <!--rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/DataflowAnomalyAnalysis" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/DetachedTestCase" /--><!--C-->
  <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly" />
  <!--rule ref="category/java/errorprone.xml/DoNotCallSystemExit" /--><!--C-->
  <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable" /><!--C-->
  <rule ref="category/java/errorprone.xml/DoNotHardCodeSDCard" /><!--C-->
  <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally" />
  <rule ref="category/java/errorprone.xml/DontImportSun" />
  <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyCatchBlock" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyFinalizer" />
  <rule ref="category/java/errorprone.xml/EmptyFinallyBlock" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyIfStmt" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyInitializer" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyStatementBlock" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptySwitchStatements" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyTryBlock" /><!--D-->
  <rule ref="category/java/errorprone.xml/EmptyWhileStmt" /><!--D-->
  
  <rule ref="category/java/errorprone.xml/EqualsNull" />
  
  <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize" />
  <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize" />
  <rule ref="category/java/errorprone.xml/FinalizeOverloaded" />
  <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected" />

  <rule ref="category/java/errorprone.xml/IdempotentOperations" />
  <rule ref="category/java/errorprone.xml/ImportFromSamePackage" /><!--D-->
  <rule ref="category/java/errorprone.xml/InstantiationToGetClass" />
  <!--rule ref="category/java/errorprone.xml/InvalidSlf4jMessageFormat" /--><!--C-->
  <rule ref="category/java/errorprone.xml/JumbledIncrementer" /><!--D-->

  <!--rule ref="category/java/errorprone.xml/JUnitSpelling" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/JUnitStaticSuite" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/LoggerIsNotStaticFinal" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass" /--><!--C-->

  <rule ref="category/java/errorprone.xml/MisplacedNullCheck" /><!--D-->
  
  <rule ref="category/java/errorprone.xml/MissingBreakInSwitch" />
  <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass" />
  <!--rule ref="category/java/errorprone.xml/MissingSerialVersionUID" /--><!--C-->
  <!--rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass" /--><!--C-->


  <!--rule ref="category/java/errorprone.xml/MoreThanOneLogger" /--><!--C-->

  
  <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement" />
  <rule ref="category/java/errorprone.xml/NonStaticInitializer" />
  <rule ref="category/java/errorprone.xml/NullAssignment" /><!--C-->
  <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode" /><!--D-->
  <rule ref="category/java/errorprone.xml/ProperCloneImplementation" />
  <rule ref="category/java/errorprone.xml/ProperLogger" /><!--C-->

  <rule ref="category/java/errorprone.xml/ReturnEmptyArrayRatherThanNull" />
  <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock" /><!--D-->

  <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale" />
  <rule ref="category/java/errorprone.xml/SingleMethodSingleton" />
  <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance" />
  <rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal" /><!--C-->
  
  <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar" />
  <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName" /><!--C-->
  <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName" /><!--C-->
  <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape" />
  <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases" /><!--C-->
  <rule ref="category/java/errorprone.xml/UnconditionalIfStatement" /><!--D-->
  <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion" /><!--C-->
  <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange" />
  <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary" /><!--D-->
  <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals" /><!--D-->
  <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging" /><!--C-->
  <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings" />
  
  <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable" /><!--D-->
  <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions" />
 <!--rule ref="category/java/errorprone.xml/UseProperClassLoader" /--><!--C-->



 <!--rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel" /--><!--C-->
  <rule ref="category/java/multithreading.xml/AvoidThreadGroup" /><!--D-->
  <!--rule ref="category/java/multithreading.xml/AvoidUsingVolatile" /--><!--C-->
  <!--rule ref="category/java/multithreading.xml/DoNotUseThreads" /--><!--C-->
  <rule ref="category/java/multithreading.xml/DontCallThreadRun" />
  <rule ref="category/java/multithreading.xml/DoubleCheckedLocking" /><!--D-->
  <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton" />
  <!--rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter" /--><!--C-->
  <!--rule ref="category/java/multithreading.xml/UseConcurrentHashMap" /--><!--C-->
  <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify" />



  <rule ref="category/java/performance.xml/AppendCharacterWithChar" />
  <rule ref="category/java/performance.xml/BigIntegerInstantiation" /><!--D-->
  <rule ref="category/java/performance.xml/BooleanInstantiation" />
  <rule ref="category/java/performance.xml/ByteInstantiation" />
  <!--rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse" /-->
  <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends" />


  <!--rule ref="category/java/performance.xml/AddEmptyString" /--><!--C-->
  <!--rule ref="category/java/performance.xml/AppendCharacterWithChar" /--><!--C-->
  <!--rule ref="category/java/performance.xml/AvoidArrayLoops" /--><!--C-->
  <!--rule ref="category/java/performance.xml/AvoidFileStream" /--><!--C-->
  <!--rule ref="category/java/performance.xml/AvoidInstantiatingObjectsInLoops" /--><!--C-->
  <!--rule ref="category/java/performance.xml/AvoidUsingShortType" /--><!--C-->
  <!--rule ref="category/java/performance.xml/BigIntegerInstantiation" /--><!--C-->
  <!--rule ref="category/java/performance.xml/BooleanInstantiation" /--><!--C-->
  <!--rule ref="category/java/performance.xml/ByteInstantiation" /--><!--C-->


  <!--rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse" /--><!--C-->
   <!--rule ref="category/java/performance.xml/ConsecutiveLiteralAppends" /--><!--C-->


  <rule ref="category/java/performance.xml/InefficientEmptyStringCheck" />
  <rule ref="category/java/performance.xml/InefficientStringBuffering" />
  <!--rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration" /--><!--C-->
  <rule ref="category/java/performance.xml/IntegerInstantiation" />
  <rule ref="category/java/performance.xml/LongInstantiation" />
  <rule ref="category/java/performance.xml/OptimizableToArrayCall" />
  <!--rule ref="category/java/performance.xml/RedundantFieldInitializer: " /--><!--C-->

  
  <rule ref="category/java/performance.xml/ShortInstantiation" />
  <!--rule ref="category/java/performance.xml/SimplifyStartsWith" /--><!--C-->
  <rule ref="category/java/performance.xml/StringInstantiation" />
  <rule ref="category/java/performance.xml/StringToString" />
  <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement" />
  <!--rule ref="category/java/performance.xml/UnnecessaryWrapperObjectCreation" /--><!--C-->
  <!--rule ref="category/java/performance.xml/UseArrayListInsteadOfVector" /--><!--C-->
  <!--rule ref="category/java/performance.xml/UseArraysAsList" /--><!--C-->
  <rule ref="category/java/performance.xml/UseIndexOfChar" />
  <rule ref="category/java/performance.xml/UselessStringValueOf" />
  <!--rule ref="category/java/performance.xml/UseStringBufferForStringAppends" /--><!--C-->
  <rule ref="category/java/performance.xml/UseStringBufferLength" />



  
  <rule ref="category/java/security.xml/HardCodedCryptoKey" />
  <rule ref="category/java/security.xml/InsecureCryptoIv" />


  <!--rule ref="rulesets/java/comments.xml/CommentRequired">
    <properties>
      <property name="publicMethodCommentRequirement"    value="Ignored"/>
      <property name="protectedMethodCommentRequirement" value="Ignored"/>
      <property name="fieldCommentRequirement"           value="Ignored"/>
      <property name="headerCommentRequirement"          value="Ignored"/>
      <property name="enumCommentRequirement"            value="Required"/>
   </properties>
  </rule-->
  <!--rule ref="rulesets/java/comments.xml/CommentSize" /-->





</ruleset>
