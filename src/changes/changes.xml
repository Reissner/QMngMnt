<document xmlns="http://maven.apache.org/changes/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/changes/1.0.0
			      http://maven.apache.org/xsd/changes-1.0.0.xsd">

	<!-- https://maven.apache.org/plugins/maven-changes-plugin/changes.html -->
	<!-- action types: 
       add: added functionality to the project.
       fix: bug fix for the project.
       update: updated some part of the project.
       remove: removed some functionnality from the project. -->
	<properties>
		<title>QMngMnt</title>
		<author email="reissner@simuline.eu">Ernst Reissner</author>
	</properties>
	<body>

		<!-- write software for various formats to check links. 
			Most important this is for markdown and for latex, but also for apidocs, maybe html. -->
		<!-- TBD: write a texinfo maven plugin or search one -->
		<!-- TBD: Tex-parser: 
	 to be generalized according to documentation in grammar. 
	 Tex-parser: problem with unbalanced $ in verbatim environments. 
	 Maybe better write new one or synchronize with Latexml. 
	 This is needed for analysis. -->

		<!-- TBD: write parser for markdown, 
	maybe extract from markdown renderer -->

		<!-- TBD: Write checker which is able to find unresolved links 
	and also base for application extracting docs with links. -->

		<!-- TBD: https://developer.okta.com/blog/2019/12/20/five-tools-improve-java
	jacoco, pmd, spotbugs, japicmp -->

		<!-- TBD: maybe introduce parent pom -->
		<!-- need a terminology database. 
			suggestion: bib-format. 
			terms: precision, accuracy, tolerance -->
		<!-- for latex documents: imports of packages and definitions. -->


		<!-- TBD: write down how to write a pom. 
	Aims: 
	- platform indepencence, 
	- repeatability 
	- quality support 
	- internationality 
	- all lifecycles without warnings 
	  (this can be weakened due to external problems 
	  or for some span of time after external update causing warnings. ) 
	  
	I think, using maven as such solves a lot of problems already. 
	Using it the right way can solve all. 
	
	How to reach this: 
	- properties: 
	  - <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	    for platform independence 
          - <maven.compiler.source>16</maven.compiler.source>
          - <maven.compiler.target>${maven.compiler.source}</maven.compiler.target>
          - <junit.jupiter.version>5.8.1</junit.jupiter.version>
          - <junit.platform.version>1.8.1</junit.platform.version>
	- plugins only given with versions. 
	  (TBD: how to ensure that not forgotten, how to check that up to date?) 
	- enforcer plugin 
	  Rules: 
	  - requireMavenVersion
	  - requireJavaVersion
	  - dependencyConvergence in the long run. 
	  
	  How to ensure depencency convergence? 
	  How to be supported by vs code? 
	  How to ensure that plugins are up to date? 
	  Mention depencency plugin. 
	  See https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
	  
	  maven help plugin 
	  
	  Requirements on tests? 
	 -->


		<!-- Release plan: 
		- upload seems to be quite long. 
		  Maybe two jars: one full with all pdfs and the main jar without: 
			just what is needed to configure maven and also bib-files. 
		- warning about java1.5 which seems strange to me 
		- in `mvn site-deploy` eliminate [WARNING] No issue management URL defined in POM. Links to your issues will not work correctly.
		- check why in many cases release plugin 3.2.0 does not work. 
		- check litPublic.bib and make rules. 
		  Maybe a document checking all would be nice. 
			There seem to be problems with capital. 
			Write down somewhere that urls shall work. 
			Maybe it is test.tex. 
		- agree on a common include file. 
	 -->

	 <!-- Synchronization between vscode and maven. 
	Best would be a plugin extracting everything from pom and transforming into setting. 
	For the moment: just go through the projects and analyze what settings are required. 
	These shall be documented. 
	Of course this must be described in this project. -->

	 <!-- Latex and related: 
		- Require bibliographies written for biblatex and biber which shall be the default. 
		- synchronize literature stored and literature in bibliography. 
		- Require terminology management: l2r or XFPNumber or what else. 
		- Write terms in bib format and use bib2gls for glossaries 
		- require a certain version of the latex plugin (not yet implemented). 
		- require standardized inputs. 
		- require latex plugin support \includeonly command
	 -->

	 <!-- .latexmkrc: shall be moved to the latex plugin, 
		but not before this can be added as a dependency. 
	There is one disadvantage: if the .latexmkrc file changes, 
this requires an update of quality management, which is slow. 
but then it requires even an update of the latex plugin. 
Note also that one has to take care of cyclic dependencies between the two projects. -->

		<release version="0.0.4" date='2022-12-03' description='very inhomogeneous improvements'>
			<action dev="ER" type="update">
				Updated versions of software to be installed. 
				Also the transition pdflatex to lualatex is a kind of update. 
			</action>
			<action dev="ER" type="update">
				PMD and its rules. 
			</action>
			<action dev="ER" type="add">
				Added .latexmkrc for quite advanced use. 
				Note that currently, the latex plugin does not support all those features in the current version. 
			</action>
			<action dev="ER" type="add">
				Added glossary.bib to define basic terms.
				Note that currently, the latex plugin does not support this feature in the current version. 
				Still a description was added to test.tex
			</action>
			<action dev="ER" type="add">
				POM: added latex plugin to create via latex, but not yet active. 
			</action>
			<action dev="ER" type="add">
				Extended and updated bibliography. 
			</action>
				<action dev="ER" type="add">
				Developed test.tex, used describe how to write documentation in latex 
				and in particular to check litPublic.bib but also for elementary rules 
				ensuring quality of tex sources. 
				Still, this is not conform with what it requires. 
			</action>
			<action dev="ER" type="add">
				Added infrastructure for online linting (see readme). 
				Also added entries to false positives and to dictionary to have zero warnings. 
			</action>
			<action dev="ER" type="add">
				Software installation: Added software to be installed by script instZypper.sh, 
				in particular watermarks in latex documents. 
				Reworked readme for installation, 
				added script addRepo.sh and script instConda.sh and added a lot of material 
				to installation of packages for vs code. 
			</action>
			<action dev="ER" type="add">
				Added Literature, e.g. zypper cheat sheet 
				and added entry in according BIB file. 
			</action>
			<action dev="ER" type="update">
				POM: versions of dependencies. 
			</action>
		</release>

		<release version="0.0.3" date='2022-05-06' description='bugfix bibtex, document on latex'>
			<action dev="ER" type="fix">
				Eliminated errors and warnings in litPublic.bib.
			</action>
			<action dev="ER" type="add">
				Added test.tex, used to check litPublic.bib but also for elementary rules 
				ensuring quality of tex sources. 
				Currently, this is not conform with what it requires. 
			</action>
			<action dev="ER" type="add">
				In README.md added pom layout
			</action>
		</release>

		<release version="0.0.2" date='2022-05-05' description='bugfix checkstyle'>
			<action dev="ER" type="fix">
				Eliminated checkstyle rule for line length due to a bug. 
				Now newer versions of checksyle can be used. 
				(This is actually the motivation for this hotfix release.)
			</action>
			<action dev="ER" type="add">
				In README.md added requirements on plugins to be specified. 
			</action>
		</release>

		<release version="0.0.1" date='2022-05-01' description='literature and its references, quality management through maven plugins'>
			<action dev="ER" type="add">
				added instructions for installation of computers. 
			</action>
			<action dev="ER" type="add">
				added minimum to turn this into a maven project: added pom and readme. 
				added additional: changes.xml 
			</action>
			<action dev="ER" type="add">
				added global bib-files 
			</action>
			<action dev="ER" type="add">
				added config for certain maven plugins supervising quality: 
				config for spotbugs, pmd and for chkstyle
			</action>
			<action dev="ER" type="add">
				added a lot of pdfs
			</action>
		</release>
	</body>
</document>
